// zfast_lcd+nds_color - A very simple LCD shader meant to be used at 1080p
// 
// - Original 'zfast_lcd' code copyright (C) 2017 Greg Hogan (SoltanGris42)
// 
// - Original 'nds_color' code written by hunterk, modified by Pokefan531 and
//   released into the public domain
// 
// 'Ported' (i.e. copy/paste) to DraStic format by jdgleaver
// 
// This program is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
// 
// Notes: This shader applies colour correction to mimic the display characteristics
//        of an NDS Phat, then applies a simple grid effect, darkening the borders of
//        'virtual' pixels at the native NDS resolution to imitate an LCD screen.
//        You can change the darkness/thickness of the borders.
//        The shader is compatible with both 'native' and 'high resolution' 3D
//        rendering modes.
// 
// *** Integer screen scaling is recommended for best results
=============================================

<vertex>

attribute vec2 a_vertex_coordinate;
attribute vec2 a_texture_coordinate;
uniform vec4 u_texture_size;

varying vec2 v_texture_coordinate;

void main()
{
	v_texture_coordinate = a_texture_coordinate;
	gl_Position = vec4(a_vertex_coordinate.xy, 0.0, 1.0);
}

</vertex>

<fragment>

#ifndef BORDERMULT
#define BORDERMULT 14.0
#endif

// Colour defines...
#define target_gamma 1.91
#define display_gamma 1.91
#define lum 0.89
#define r 0.87
#define g 0.645
#define b 0.73
#define rg 0.10
#define rb 0.10
#define gr 0.255
#define gb 0.17
#define br -0.125
#define bg 0.255

uniform sampler2D u_texture;
uniform vec4 u_texture_size;

varying vec2 v_texture_coordinate;

const float NDS_SCREEN_HEIGHT = 192.0;

void main()
{
	// Generate grid pattern (in native NDS coordinate space)
	// - Have to divide by the current scale factor...
	//   There can only be two values here:
	//   > 'High-Resolution 3D Rendering' OFF - scale factor == 1
	//   > 'High-Resolution 3D Rendering' ON  - scale factor == 2
	//   But it's easiest to assume the general case...
	//    scale_factor == texture_height / NDS_SCREEN_HEIGHT
	vec2 texcoordInPixels = v_texture_coordinate.xy * u_texture_size.zw * (NDS_SCREEN_HEIGHT * u_texture_size.y);
	vec2 centerCoord = floor(texcoordInPixels.xy) + vec2(0.5, 0.5);
	vec2 distFromCenter = abs(centerCoord - texcoordInPixels);
	
	float Y = max(distFromCenter.x, distFromCenter.y);
	
	Y = Y * Y;
	float YY = Y * Y;
	float YYY = YY * Y;
	
	float LineWeight = YY - 2.7 * YYY;
	LineWeight = 1.0 - BORDERMULT * LineWeight;
	
	// Apply colour correction
	vec3 screen = pow(texture2D(u_texture, v_texture_coordinate.xy).rgb, vec3(target_gamma));
	screen = clamp(screen * lum, 0.0, 1.0);
	screen = pow(
		mat3(r,  rg, rb,
			  gr, g,  gb,
			  br, bg, b) * screen,
		vec3(1.0 / display_gamma)
	);
	
	// Add grid lines
	gl_FragColor = vec4(screen * LineWeight, 1.0);
}

</fragment>
